#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <regex>

using namespace std;

typedef long long ll;
ll toInt(string s) {stringstream in(s, ios_base::in); ll result; in >> result; return result;}

bool test_condition(string condition, int lhs, int rhs, int rhs1)
{
    if (condition == "==")
        return lhs == rhs;
    else if (condition == "<")
        return lhs < rhs;
    else if (condition == "<=")
        return lhs <= rhs;
    else if (condition == ">")
        return lhs > rhs;
    else if (condition == ">=")
        return lhs >= rhs;
    else if (condition == "!=")
        return lhs != rhs;
    else if (condition == "<>")
        return (lhs >= rhs && lhs <= rhs1);

    return false;
}

class condition
{
public:
    string symbol;
    string bool_condition;
    int value1;
    int value2;

    virtual set<int> testComparison() 
    {
        set<int> possibleVals;

        for (int i = -9; i <= 9; ++i)
        {
            if (test_condition(bool_condition, i, value1, value2))
                possibleVals.insert(i);
        }

        return possibleVals;
    }
};

condition matchCondition(string str)
{
    cmatch res;
    regex rx1("(\\w)([<>=!]=?)(-?[0-9])");
    regex rx2("(\\w)B(-?[0-9])(-?[0-9])");
    bool res1 = regex_match(str.c_str(), res, rx1);

    condition c;
    if (res1)
    {
        c.symbol = res[0];
        c.bool_condition = res[1];
        c.value1 = (int)toInt(res[2]);
        c.value2 = -1;

        return c;
    }


    if (!res1)
    {
        bool res2 = regex_match(str.c_str(), res, rx2);
        c.symbol = res[0];
        c.bool_condition = "<>";
        c.value1 = (int)toInt(res[1]);
        c.value2 = (int)toInt(res[2]);
    }

    return c;
}

struct RuleSet
{
    vector<condition> rules;
};


class RuleEngine 
{
public:
	string countSets(vector <string> param0, vector <string> param1) 
    {
		RuleSet rule_set1, rule_set2;

        for (int i = 0; i < param0.size(); ++i)
        {
            condition c = matchCondition(param0[i]);
            rule_set1.rules.push_back(c);
        }

        for (int i = 0; i < param1.size(); ++i)
        {
            condition c = matchCondition(param1[i]);
            rule_set2.rules.push_back(c);
        }

        return 0;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RuleEngine *obj;
	string answer;
	obj = new RuleEngine();
	clock_t startTime = clock();
	answer = obj->countSets(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	string p2;

    string ruleset1[] = { "A<1", "B==2", "C>4", "D>=6", "E<=9", "FB1,2", "J!=6" };
    string ruleset2[] = { "E>9" };

    p0.assign(ruleset1, ruleset1 + 7);
    p1.assign(ruleset2, ruleset2 + 1);

    RuleEngine re;
    p2 = re.countSets(p0, p1);
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
