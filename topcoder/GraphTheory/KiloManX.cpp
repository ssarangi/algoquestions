/* TODO: Fix the visited structure for this problem to generate the correct results */

// Includes
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
 
class node
{
public:
    int weaponNum;
    int shots;
    int bossesKilled;
    int prevWeapon;

    node(int wnum, int s, int bossKilled, int pWeapon) : weaponNum(wnum), shots(s), bossesKilled(bossKilled), prevWeapon(pWeapon) {}
    node(const node& rhs)
    {
        weaponNum = rhs.weaponNum;
        shots = rhs.shots;
        bossesKilled = rhs.bossesKilled;
        prevWeapon = rhs.prevWeapon;
    }
};

bool operator<(const node& lhs, const node& rhs)
{
    if (lhs.shots < rhs.shots)
        return true;
    return false;
}

class KiloManX 
{
    bool visited[32768];

    int numWeapons;

    int compute_cost(vector<string>& damageChart, vector<int>& bossHealth, int currentWeapon, int nextBossIndex, int prevIndex)
    {
        // If we have come from the starting position then you cannot return
        if (prevIndex == -1)
            return -1;

        // If the visited index is true then don't allow the move
        if (visited[nextBossIndex + 1][prevIndex + 1] == true)
            return -1;
        
        int damage;
        if (currentWeapon == -1)
            damage = 1;
        else
            damage = damageChart[currentWeapon][nextBossIndex] - '0';

        if (damage == 0)
            return -1;

        int health = bossHealth[nextBossIndex];

        int cost = (int)ceil((double)health / (double)damage);
        return cost;
    }


public:
	int leastShots(vector <string> damageChart, vector <int> bossHealth) 
    {
        numWeapons = bossHealth.size();

        priority_queue<node> pq;

        pq.push(node(-1, 0, 0, -1));

        while (!pq.empty()) 
        {
            node top = pq.top();
            pq.pop();


            // Terminating condition
            if (top.bossesKilled == numWeapons)
                return top.shots;

            // Make sure we don't visit the same configuration twice
            visited[top.weaponNum] = true;

            // Now look at all the possible paths
            for (int i = 0; i < numWeapons; i++)
            {
                // Now look at all paths
                if (top.weaponNum != i)
                {
                    int current_cost = compute_cost(damageChart, bossHealth, top.weaponNum, i, top.prevWeapon);

                    if (current_cost == -1)
                        continue;

                    pq.push(node(i, top.shots + current_cost, top.bossesKilled, top.prevWeapon));
                }
            }
        }

        return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	KiloManX *obj;
	int answer;
	obj = new KiloManX();
	clock_t startTime = clock();
	answer = obj->leastShots(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}

int main() 
{
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"070","500","140"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {150,150,150};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 218;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	//{
	//// ----- test 1 -----
	//string t0[] = {"1542","7935","1139","8882"};
	//		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	//int t1[] = {150,150,150,150};
	//		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	//p2 = 205;
	//all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	//// ------------------
	//}
	//
	//{
	//// ----- test 2 -----
	//string t0[] = {"07","40"};
	//		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	//int t1[] = {150,10};
	//		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	//p2 = 48;
	//all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	//// ------------------
	//}
	
	//{
	//// ----- test 3 -----
	//string t0[] = {"198573618294842","159819849819205","698849290010992","000000000000000","139581938009384","158919111891911","182731827381787","135788359198718","187587819218927","185783759199192","857819038188122","897387187472737","159938981818247","128974182773177","135885818282838"};
	//		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	//int t1[] = {157,1984,577,3001,2003,2984,5988,190003,9000,102930,5938,1000000,1000000,5892,38};
	//		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	//p2 = 260445;
	//all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	//// ------------------
	//}
	//
	//{
	//// ----- test 4 -----
	//string t0[] = {"02111111","10711111","11071111","11104111","41110111","11111031","11111107","11111210"};
	//		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	//int t1[] = {28,28,28,28,28,28,28,28};
	//		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	//p2 = 92;
	//all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	//// ------------------
	//}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}

    system("pause");
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
