1) Find the maximum sum of a sub-sequence from an positive integer array where any two numbers of sub-sequence are not adjacent to each other in the original sequence. E.g 1 2 3 4 5 6 --> 2 4 6
Code File: LongestSubSequence.cpp


2) Given a tree, print the values contained at each level on the same line.
So if you had the tree with root A, and children B and C, you would print:
A
B C
// Use a queue. Insert tree->root.
// Then while (!queue.empty())
// take out the node inserted.
// Insert left child & right child into queue
// Repeat



3) Find the min and max in an array. Now do it in less than 2n comparisons. (they were looking for the solution that finds both max and min in about 3/2 n comparisons).

4) Compute the square root of a number down to a certain precision.
ie sqrt(num, precision) returns a number that is in-between sqrt(num) - precision and sqrt(num) + precision.

5) Given a positive real number x, find the square root of x without using built-in sqrt functions.

6) Given an array of integers, now we want to erase all 0's (can be other value), and we want the result array condensed, meaning no empty cell in the array.

7) Given an unsorted array of integers, find a 3-element subset that sums to zero

8) Write a class providing an LRU cache

9) Given a list of words with a same size and a big string that contains one of the permutation of all the words combined(say p), find the startindex of the string p in the big string

10) Find a needle in the haystack: given two c-strings (null terminated), return a pointer to the location of where the needle occurs in the haystack, NULL otherwise.

11) Given a binary tree print the first level, followed by a newline, the second level, followed by a newline, etc.

12) How can one implement a queue with only a stack implementation?

13) How would you implement a method to tell whether or not a string matches a regex that consists of lower case letters and *s.

14) Write the actual code to reverse a linked list

15) Write the actual code to parse a regular expression including "*", which stands for 0 or more characters, "+", which stands for 1 or more characters, and ".", which stands for 1 exact character.

16) Generate a new array from an array of numbers. Start from the beginning. Put the number of some number first, and then that number.
    For example, from array 1, 1, 2, 3, 3, 1
    You should get 2, 1, 1, 2, 2, 3, 1, 1
Write a program to solve this problem.

17) Print out all prime numbers in a given string. abc2134kd31 -> 2, 13, 3, 3

18) Implement division without using multiplication or division. It should work most efficient and fast.

19) Implement a suggestion function that generates alternative strings for given password strings like "facebook" => "F@ce�00k" and "f�c�Bo0K" or sth.

20) Implement a function
    char* readLine();
    which returns single lines from a buffer. To read the buffer, you can makes use of a function
    int read(char* buf, int len)
    which fills buf with upto len chars and returns the actual number of chars filled in. 
    Function readLine can be called as many times as desired. If there is no valid data or newline terminated 
    string available, it must block. In order to block, it can use read function which in turn will block when 
    it doesn't have anything to fill the buf.

21) Implement a function rotateArray(vector<int> arr, int r) which rotates the array by r places. Eg 1 2 3 4 5 on being rotated by 2 gives 4 5 1 2 3.

22) Implement a function string balanceParanthesis(string s); which given a string s consisting of some parenthesis returns a string s1 in which parenthesis are balanced and differences between s and s1 are minimum.
    Eg - "(ab(xy)u)2)" -> "(ab(xy)u)2"
    ")))(((" -> ""

23) Find Kth smallest element in a BST.

24) Given a Binary Search Tree, iterate over the elements without using recursion.

25) Given a set of non-overlapping integer ranges (1,3) (5,8), etc., and an input integer, what is the best way to organize the data and allow for quick search based on the input, etc.

26) Given a telephone number, find all the permutations of the letters assuming 1=abc, 2=def, etc.

27) Print a singly-linked list backwards, in constant space and linear time.

28) Convert a binary search tree to a sorted, circular, doubly-linked list, in place (using the tree nodes as the new list nodes).

29) Given a set of words, group them into sets of anagrams.

30) Given a string, remove all the duplicate characters (not necessarily consecutive)

31) Find an algorithm to find the largest sum subarray in an array of integers. (Better than O(n^2) ). 
    - Same as the longest Subsequence problem

32) Given a list of n objects, write a function that outputs the minimum set of numbers that sum to at least K. FOLLOW UP: can you beat O(n ln n)?

33) Write a function that computes log2() using sqrt().

34) Given sorted arrays of length n and 2n with n elements each, merge first array into second array.

35) You are given intervals of contiguous integers, like [1, 10), [15, 25), [40, 50), which are non-overlapping and of a fixed size.
    Design a data structure to store these intervals and have the operations of insert, delete, and find functions

36) Find the minimum depth of binary search tree

37) Write a function to take a BST and a value k as input and have it print the kth smallest element in the BST.

38) Write a function that takes a binary tree as input, and have it perform In order traversal - recursive and then iterative

39) Write a function to take two arbitrarily long numbers in the form of Strings and multiply them, returning another String with the product.

40) Given a binary tree, write a function to find the length of the longest path in the tree.

41) Implement the div operator without using / or %

42) First question: for a random-ordered bucket of numbers 1 through 3000 with one number missing, how would you detect which number is missing?

43) 
